In this assignment, you will create a custom attribute in C# and apply it to different elements within a program to provide additional metadata. This task will help you understand the concept and usage of attributes in C#, including how to define custom attributes and apply them to classes, methods, or properties.

Task:

Create Custom Attribute:
Define a custom attribute class with properties and constructors as needed.
Apply Attribute:
Apply the custom attribute to classes, methods, or properties within a C# program.
Scenario-based Action Items:
Create scenarios demonstrating the usage of the custom attribute on different elements.
Ensure that all scenarios are covered by appropriate test cases.
Instructions:

Write the C# code for the custom attribute class and its usage within a program.
Implement test cases to validate the functionality of the custom attribute across different scenarios.
Document your code with comments to explain the purpose and usage of the custom attribute.



********************************************************Program*****************************************************************
using System;
using System.Reflection;


[AttributeUsage(AttributeTargets.Class | AttributeTargets.Method | AttributeTargets.Property)]
public class CustomDescriptionAttribute : Attribute
{
    public string Description { get; }
    public int Version { get; }

    public CustomDescriptionAttribute(string description, int version)
    {
        Description = description;
        Version = version;
    }
}
[CustomDescription("This is a sample class.", 1)] 
public class SampleClass
{
    [CustomDescription("This is a sample method.", 2)]
    public void SampleMethod()
    {
    }

    private string _sampleProperty;

    [CustomDescription("This is a sample property.", 3)] 
    public string SampleProperty
    {
        get { return _sampleProperty; }
        set { _sampleProperty = value; }
    }
}

class Program
{
    static void Main(string[] args)
    {
        
        Type type = typeof(SampleClass);

        var classAttribute = (CustomDescriptionAttribute)Attribute.GetCustomAttribute(type, typeof(CustomDescriptionAttribute));
        if (classAttribute != null)
        {
            Console.WriteLine($"Class Description: {classAttribute.Description}, Version: {classAttribute.Version}");
        }

        MethodInfo method = type.GetMethod("SampleMethod");
        var methodAttribute = (CustomDescriptionAttribute)Attribute.GetCustomAttribute(method, typeof(CustomDescriptionAttribute));
        if (methodAttribute != null)
        {
            Console.WriteLine($"Method Description: {methodAttribute.Description}, Version: {methodAttribute.Version}");
        }

        PropertyInfo property = type.GetProperty("SampleProperty");
        var propertyAttribute = (CustomDescriptionAttribute)Attribute.GetCustomAttribute(property, typeof(CustomDescriptionAttribute));
        if (propertyAttribute != null)
        {
            Console.WriteLine($"Property Description: {propertyAttribute.Description}, Version: {propertyAttribute.Version}");
        }

        SampleClass sample = new SampleClass();
        sample.SampleMethod(); 
    }
}
